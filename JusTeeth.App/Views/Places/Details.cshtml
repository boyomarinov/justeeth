@model JusTeeth.App.ViewModels.DetailedPlaceViewModel
@using System.Security.Cryptography

<div id="place-title">
    <h2>@Model.Name</h2>
    <h3>(aka. @Model.AlternativeName)</h3>
</div>

<div class="row-fluid">
    <div id="place-details-info" class="span3">
        <div>
            <strong>
                @Html.DisplayNameFor(model => model.Address):
            </strong>
            <h4>
                @Html.DisplayFor(model => model.Address)
            </h4>
        </div>

        <div>
            <strong>
                @Html.DisplayNameFor(model => model.Description):
            </strong>
            <h4>
                @Html.DisplayFor(model => model.Description)
            </h4>
        </div>
@**@
@*        <div>*@
@*            <strong>*@
@*                @Html.DisplayNameFor(model => model.MonthRating):*@
@*            </strong>*@
@*            <h4>*@
@*                @Html.DisplayFor(model => model.MonthRating)*@
@*            </h4>*@
@*        </div>*@

        <div>
            <strong>
                @Html.DisplayNameFor(model => model.Rating):
            </strong>
            <h4>
                <div id="place-rating"></div>
            </h4>
        </div>
    </div>
    <div class="span5">
        <div id="pie-charts">
            <div id="place-eatingtime-container">
                @(Html.Kendo().Chart()
                    .Name("placeEatTimeChart")
                    .Title(title => title
                        .Text("How fast we are going to eat?")
                        .Position(ChartTitlePosition.Bottom))
                    .Legend(legend => legend.Visible(true)
                    )
                    .Series(series =>
                    {
                        series.Pie(new dynamic[] {
                            new { @*category = @Model.EatTime,*@ value = @Model.EatPiePercent, color = @Model.EatColor},
                            new { value=@Model.EatRemainingPercent, color="grey"},
                        })
                            .Padding(0)
                            .Labels(labels => labels.Visible(false))
                            .StartAngle(90);
                    }))
            </div>
            <div id="place-price-container">
                @(Html.Kendo().Chart()
                    .Name("placePriceChart")
                    .Title(title => title
                        .Text("How much money we are going to spend?")
                        .Position(ChartTitlePosition.Bottom))
                    .Legend(legend => legend.Visible(true))
                    .Series(series =>
                    {
                        series.Pie(new dynamic[] {
                            new { @*category = @Model.EatTime,*@ value = @Model.PricePiePercent, color = @Model.PriceColor},
                            new { value=@Model.PriceRemainingPercent, color="grey"},
                        })
                            .Padding(0)
                            .Labels(labels => labels.Visible(false))
                            .StartAngle(90);
                    })
                )

            </div>
        </div>
    </div>
    <div class="span4">
        <div id="location-map"></div>
    </div>
</div>
<div class="row-fluid">
    <div id="feedbacks" class="span8">
        <h3>User Feedbacks</h3>
        <ul id="feedbacks-list">
            @foreach (var feedback in @Model.Feedbacks)
            {
                @Html.Partial("_FeedbackPartial", feedback)
            }
        </ul>
    </div>
    <div id="leave-feedback" class="span4">
        <h3>Leave Feedbacks</h3>
@*        @using (Html.BeginForm())*@
@*        {*@
@*             <label for="title">Title</label>*@
@*            <input id="title" type="text" name="title" value="" />*@
@*            <label for="comment">Comment</label>*@
@*            <textarea id="comment" name="content"></textarea>*@
@*            <span>Rating:</span><div id="input-rating" name="rating"></div>*@
@*            Ajax.ActionLink("Comment", "Feedback", "Places", metho)*@
@*        } *@
        @using (Ajax.BeginForm("Feedback", new AjaxOptions { HttpMethod = "Post", InsertionMode = InsertionMode.InsertAfter, UpdateTargetId = "feedbacks-list", OnFailure = "commentPostFailure" }))
        {
            @Html.Hidden("PlaceId", Model.Id)
            @Html.TextBox("title")
            @Html.TextArea("content")
            @Html.Kendo().DropDownList().OptionLabel("Select eat time").Name("EatTime").BindTo(ViewBag.EatTime)
            <br/>
            @Html.Kendo().DropDownList().OptionLabel("Select price type").Name("PriceType").BindTo(ViewBag.Price)
            <br />
            <span>Rating:</span><div id="input-rating" name="rating"></div>
            @Html.AntiForgeryToken()
            <input type="submit" value="Comment" />
        }
    </div>
</div>



@*    <div class="row-fluid">*@
@*        @(Html.Kendo().ListView<JusTeeth.App.ViewModels.HungryUserViewModel>(Model.Users)*@
@*              .Name("usersListView")*@
@*              .TagName("div")*@
@*              .ClientTemplateId("template")*@
@*        )*@
@*    </div>*@

@Html.ActionLink("Back to List", "Index")
@section Scripts {
    <script type="text/javascript"
            src="http://maps.google.com/maps/api/js?sensor=false">
    </script>
}
<script>
    function initialize() {
        var placeName = '@(Model.Name)';
        var latitude = '@(Model.Latitude)';
        var longitude = '@(Model.Longitude)';

        var latLng = new google.maps.LatLng(latitude, longitude);
        var options = {
            zoom: 14,
            center: latLng,
            mapTypeId: google.maps.MapTypeId.ROADMAP
        };
        var map = new google.maps.Map(document.getElementById("location-map"), options);
        var marker = new google.maps.Marker({
            position: latLng,
            map: map,
            title: placeName
        });

        //        var loc = {};
        //        var geocoder = new google.maps.Geocoder();
        //        if (google.loader.ClientLocation) {
        //            loc.latitude = google.loader.ClientLocation.latitude;
        //            loc.longitude = google.loader.ClientLocation.longitude;
        //
        //            var currentLatLng = new google.maps.LatLng(loc.latitude, loc.longitude);
        //
        //            geocoder.geocode({ "currentLatLng": currentLatLng }, function(results, status) {
        //                if (status == google.map.GeocoderStatus.OK) {
        //                    var currentPositionMarker = new google.maps.Marker({
        //                        position: currentLatLng,
        //                        map: map,
        //                        title: "Current position"
        //                    });
        //                }
        //            });
        //
        //        }
    }

    $(function() {
        var containerWidth = $("#location-map").width();
        var containerHeight = $("#location-map").height();
        $("#location-map").css("width", containerWidth + "px");
        $("#location-map").css("height", "250" + "px");

        initialize();
    });

    $(".feedback-rating").each(function(e) {
        var rating = $(this).attr("data-rating");
        $(this).raty({ score: rating, number: 10, path: '/Content/RatyImages/', readOnly: true, });
    });

    var rating = @Model.Rating

    $("#place-rating").raty({number: 10, score: rating, path: '/Content/RatyImages/', readOnly: true });

    $("#input-rating").raty({
        click: function (score, evt) {
            $(this).val(score);
            //alert('ID: ' + $(this).attr('id') + "\nscore: " + score + "\nevent: " + evt);
        },
        path: '/Content/RatyImages/',
        number:10
    });
</script>